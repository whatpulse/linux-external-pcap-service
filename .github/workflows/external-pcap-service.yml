name: Build External PCap Service

on:
  # Trigger on version tags (e.g., v1.0.1, v1.2.0)
  push:
    tags:
      - "v*"

  # Manual trigger for testing or emergency releases
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build (e.g., 1.0.1)"
        required: true
        type: string
      create_release:
        description: "Create GitHub release"
        required: true
        default: true
        type: boolean

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            libpcap-dev \
            build-essential \
            dpkg-dev \
            rpm \
            devscripts \
            debhelper \
            libsystemd-dev \
            libcap-dev \
            fakeroot \
            binutils

      - name: Extract version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (v1.0.1 -> 1.0.1)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Extracted version from tag: $VERSION"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use manually provided version
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manually provided version: $VERSION"
          else
            echo "Unable to determine version"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "PCAP_SERVICE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Verify version matches source code
        run: |
          SOURCE_VERSION=$(grep '#define PCAP_SERVICE_VERSION ' pcapservice.h | awk -F '"' '{print $2}')

          echo "Source code version: $SOURCE_VERSION"
          echo "Build version: ${{ steps.version.outputs.version }}"

          if [ "$SOURCE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "⚠️  Version mismatch detected!"
            echo "Source code defines version: $SOURCE_VERSION"
            echo "Tag/input specifies version: ${{ steps.version.outputs.version }}"
            echo ""
            echo "Please update the PCAP_SERVICE_VERSION in pcapservice.h to match the tag version,"
            echo "or use the correct tag that matches the source code version."
            exit 1
          fi

          echo "✓ Version verification passed"

      - name: Build external PCap service
        run: |
          echo "Building External PCap Service v${{ steps.version.outputs.version }}..."

          # Clean and build
          make clean
          make shared
          make dist-source

          # Verify binary was created
          if [ ! -f "whatpulse-pcap-service" ]; then
            echo "Error: Binary not found after build"
            exit 1
          fi

          echo "✓ Build completed successfully"

      - name: Build Debian package
        run: |
          chmod +x scripts/build-deb.sh
          ./scripts/build-deb.sh ${{ steps.version.outputs.version }}

          echo "Debian package build completed"

      - name: Build RPM package
        run: |
          chmod +x scripts/build-rpm.sh
          ./scripts/build-rpm.sh ${{ steps.version.outputs.version }}

          echo "RPM package build completed"

      - name: Build Arch package
        run: |
          chmod +x scripts/build-arch.sh
          ./scripts/build-arch.sh ${{ steps.version.outputs.version }}

          echo "Arch package build completed"

      - name: Create standalone binary
        run: |
          # Create versioned binary
          cp whatpulse-pcap-service whatpulse-pcap-service-${{ steps.version.outputs.version }}-linux-amd64
          strip whatpulse-pcap-service-${{ steps.version.outputs.version }}-linux-amd64
          chmod +x whatpulse-pcap-service-${{ steps.version.outputs.version }}-linux-amd64

          echo "✓ Standalone binary created"

      - name: Collect artifacts
        run: |
          mkdir -p dist/packages

          # Copy packages from script build directories
          find scripts -name "*.deb" -exec cp {} dist/packages/ \; 2>/dev/null || echo "No .deb files found"
          find scripts -name "*.rpm" -exec cp {} dist/packages/ \; 2>/dev/null || echo "No .rpm files found"
          find scripts -name "*.pkg.tar.*" -exec cp {} dist/packages/ \; 2>/dev/null || echo "No .pkg.tar.* files found"

          # Copy source distribution and standalone binary
          cp -v dist/*.tar.gz dist/packages/ 2>/dev/null || echo "No .tar.gz files found"
          cp -v whatpulse-pcap-service-${{ steps.version.outputs.version }}-linux-amd64 dist/packages/

          echo "📦 Final artifacts:"
          ls -la ../dist/packages/

      - name: Generate checksums
        run: |
          cd dist/packages
          sha256sum * > SHA256SUMS
          echo "✓ Checksums generated"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pcap-service-packages-${{ steps.version.outputs.version }}
          path: dist/packages/
          retention-days: 30

      - name: Create GitHub Release
        if: |
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.version.outputs.version) || github.ref_name }}
          name: "WhatPulse PCap Service v${{ steps.version.outputs.version }}"
          body: |
            # WhatPulse External PCap Service v${{ steps.version.outputs.version }}

            This release contains the external PCap service that provides network packet capture capabilities for WhatPulse when running in containerized environments (AppImage, Flatpak) where direct PCap access is not available.

            ---

            **Built from commit:** ${{ github.sha }}
            **Build date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          files: |
            dist/packages/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          cd dist/packages
          for file in *; do
            if [[ -f "$file" && "$file" != "SHA256SUMS" ]]; then
              size=$(du -h "$file" | cut -f1)
              echo "- **$file** ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "- 🚀 GitHub release created automatically" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.create_release }}" == "true" ]]; then
            echo "- 🚀 GitHub release created manually" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 📋 Artifacts uploaded to workflow (no release created)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 📥 Download packages from the release or workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Test installation on target systems" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 Update documentation if needed" >> $GITHUB_STEP_SUMMARY
